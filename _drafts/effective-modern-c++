---
layout: post
title: effective modern c++
categories: dev
tags: c++
---
# 템플릿 타입 추론 규칙
```c++
tempate<typename T>
void f(const T& param);
```
 위와 같은 템플릿의 선언이 있다고 하자.
 const T& 이 매개변수 타입이다.
```c++
int x = 0;
f(x);
```
 위의 코드에서 함수 f의 인수 타입은 int 이고, 매개변수 타입은 const int& 이다. 즉, 템플릿 매개변수 T는 int 로 추론된다.
T는 인수 타입과 매개변수 타입에 의해 추론된다. 형태에 따라 총 세 가지 경우로 나누어 볼 수 있다.

1. 매개변수 타입이 참조 타입이지만 보편 참조는 아닌 경우
 - 인수 타입이 참조 타입이면 참조 부분이 무시된다.
 - 인수 타입을 매개변수 타입에 대응시켜보면 T의 타입을 결정할 수 있다.
```c++
template<typename T>
void f(T& param);	// param은 참조 형식

int x = 27;		// x 는 int
const int cx = x;	// cx 는 const int
const int& rx = x;	// rx 는 const int인 x에 대한 참조

f(x);			// T 는 int, param의 타입은 int&
f(cx);			// T 는 const int, param의 타입은 const int&
f(rx);			// T 는 const int, param의 타입은 const int&
```
 - const 성은 T에 대해 연역된 형식의 일부가 된다.
 - 참조성은 무시된다.

```c++
template<typename T>
void f(const T& param);		// param이 const 에 대한 참조

int x = 27;			// x 는 int
const int cx = x;		// cx 는 const int
const int& rx = x;		// rx 는 const int인 x에 대한 참조

f(x);				// T는 int, param의 타입은 const int&
f(cx);				// T는 int, param의 타입은 const int&
f(rx);				// T는 int, param의 타입은 const int&
```

2. 매개변수 타입이 보편 참조인 경우
 - 인수 타입이 lvalue 타입이면 T와 매개변수 타입 모두 lvalue 참조로 추론된다. T가 참조 타입으로 추론되는 경우는 이 경우가 유일하다.
 - 매개변수 타입이 rvalue 참조 같은 모습이지만 추론된 형식은 lvalue 참조이다.
 - 인수 타입이 rvalue 이면 1번 경우의 규칙들이 적용된다.
```c++
template<typename T>
void f(T&& param);	// param은 보편 참조
 
int x = 27;		// x 는 int
const int cx = x;	// cx 는 const int
const int& rx = x;	// rx 는 const int인 x에 대한 참조
 
f(x);			// x 는 lvalue, 따라서 T는 int&, param의 타입 역시 int&
f(cx);			// cx 는 lvalue, 따라서 T는 const int&, param의 타입 역시 const int&
f(rx);			// rx 는 lvalue, 따라서 T는 const int&, param의 타입 역시 const int&
f(27);			// 27은 rvalue, 따라서 T는 int, 그러므로 param의 타입은 int&&
```
 
3. 매개변수 타입이 참조가 아닌 경우
 - 인수가 값으로 전달되는 상황이다.
 - 인수 타입이 참조라도 참조는 무시된다.
 - 인수 타입의 const 성도 무시된다. volatile 도 무시된다.
```c++
template<typename T>
void f(T param);	// param이 값으로 전달된다.
 
int x = 27;		// x 는 int
const int cx = x;	// cx 는 const int
const int& rx = x;	// rx 는 const int인 x에 대한 참조
 
f(x);			// T와 param의 타입 모두 int
f(cx);			// 여전히 T와 param의 타입은 모두 int
f(rx);			// 이번에도 T와 param의 타입은 모두 int
```
4. 배열 인수
 - 배열 형식은 포인터 형식과는 다르다.
 - 템플릿 함수에 값으로 전달되는 배열의 타입은 포인터 타입으로 추론된다.
```c++
template<typename T>
void f(T param);			// 값 전달 매개변수가 있는 템플릿
 
const char name[] = "J. P. Briggs";	// name의 형식은 const char[13]
const char* ptr_to_name = name;	// 배열이 포인터로 붕괴한다.
 
f(name);				// name은 배열이지만 T는 const char* 로 추론된다.
 
template<typename T>
void b(T& param);			// 참조 전달 매개변수가 있는 템플릿
 
b(name);				// T는 const char[13]으로 추론되고, 매개변수 타입은 const char (&)[13] 으로 추론된다.
```
 - 이런 특성을 이용하면 배열에 담긴 원소들의 개수를 추론하는 템플릿을 만들 수 있다.
 
5. 함수 인수
 - 배열만 포인터로 붕괴하는 것이 아니고 함수 타입도 함수 포인터로 붕괴될 수 있다.
```c++
void some_func(int, double);	// some_func는  타입은 void(int, double)
  
template<typename T>
void f1(T param);		// f1의 param은 값 전달 형식
  
template<typename T>
void f2(T& param);		// f2의 param은 참조 전달 방식
  
f1(some_func);		// param은 함수 포인터로 추론됨. 타입은 void (*)(int, double)
  
f2(some_func);		// param은 함수 참조로 추론됨. 타입은 void (&)(int, double)
```


layout: post
title: baidu push c# 구현
categories: dev
tags: baidu push c# dev
---
# reference
- [http://push.baidu.com/doc/restapi/restapi](http://push.baidu.com/doc/restapi/sdk_developer)
- [http://push.baidu.com/doc/restapi/sdk_developer](http://push.baidu.com/doc/restapi/sdk_developer)

# 유의할 점
- baidu 의 push server 가 php 로 구현되어있는지 php 의 urlencode 를 구현해야 한다. php 의 urlencode 는 공백(%20)을 '+' 로 대체한다. 

```c#
TimeSpan t = DateTime.Now - new DateTime(1970, 1, 1);
int totalSeconds = (int)t.TotalSeconds;
string timestamp = totalSeconds.ToString();                

SortedDictionary<string, string> param = new SortedDictionary<string, string>();
param["apikey"] = _setting.ApiKey;
param["timestamp"] = timestamp;
param["channel_id"] = baiduNotification.ChannelId;
param["msg"] = baiduNotification.Msg;

if (baiduNotification.MsgType.HasValue)
{
	param["msg_type"] = baiduNotification.MsgType.Value.ToString();
}

if (baiduNotification.DeployStatus.HasValue)
{
	param["deploy_status"] = baiduNotification.DeployStatus.Value.ToString();
}                

string parameterString = "";

foreach (KeyValuePair<string, string> pair in param)
{
	parameterString += pair.Key + "=" + pair.Value;
}

string baseString = _setting.Method + _setting.Url + parameterString + _setting.SecretKey;

string escapedDataString = Uri.EscapeDataString(baseString);
string urlencodedString = escapedDataString.Replace("%20", "+");

string hashedString = "";
using (MD5 md5 = MD5.Create())
{
	byte[] data = md5.ComputeHash(Encoding.UTF8.GetBytes(urlencodedString));

	StringBuilder builder = new StringBuilder();

	for (int i = 0; i < data.Length; ++i)
	{
		builder.Append(data[i].ToString("x2"));
	}

	hashedString = builder.ToString();
}

param["sign"] = hashedString;

string content = "";                
foreach (KeyValuePair<string, string> pair in param)
{
	if (0 < content.Length)
		content += "&";

	content += pair.Key + "=" + pair.Value;
}

HttpClient client = new HttpClient();                    
client.DefaultRequestHeaders.UserAgent.TryParseAdd("BCCS_SDK/3.0 (Darwin; Darwin Kernel Version 14.0.0: Fri Sep 19 00:26:44 PDT 2014; root:xnu-2782.1.97~2/RELEASE_X86_64; x86_64) PHP/5.6.3 (Baidu Push Server SDK V3.0.0 and so on..) cli/Unknown ZEND/2.6.0");

StringContent stringContent = new StringContent(content, Encoding.UTF8, "application/x-www-form-urlencoded");
Httpㅐㅑㅇ
  ```
# auto 타입 추론 규칙
# decltype 작동 방식
# constexpr 
# 특수 멤버 함수들의 자동 작성 조건
# std::move 와 std::forward
# 참조 축약
# 완벽 전달의 실패

# reference
- [http://push.baidu.com/doc/restapi/restapi](http://push.baidu.com/doc/restapi/sdk_developer)
- [http://push.baidu.com/doc/restapi/sdk_developer](http://push.baidu.com/doc/restapi/sdk_developer)

# 유의할 점
- baidu 의 push server 가 php 로 구현되어있는지 php 의 urlencode 를 구현해야 한다. php 의 urlencode 는 공백(%20)을 '+' 로 대체한다. 

```c#
TimeSpan t = DateTime.Now - new DateTime(1970, 1, 1);
int totalSeconds = (int)t.TotalSeconds;
string timestamp = totalSeconds.ToString();                

SortedDictionary<string, string> param = new SortedDictionary<string, string>();
param["apikey"] = _setting.ApiKey;
param["timestamp"] = timestamp;
param["channel_id"] = baiduNotification.ChannelId;
param["msg"] = baiduNotification.Msg;

if (baiduNotification.MsgType.HasValue)
{
	param["msg_type"] = baiduNotification.MsgType.Value.ToString();
}

if (baiduNotification.DeployStatus.HasValue)
{
	param["deploy_status"] = baiduNotification.DeployStatus.Value.ToString();
}                

string parameterString = "";

foreach (KeyValuePair<string, string> pair in param)
{
	parameterString += pair.Key + "=" + pair.Value;
}

string baseString = _setting.Method + _setting.Url + parameterString + _setting.SecretKey;

string escapedDataString = Uri.EscapeDataString(baseString);
string urlencodedString = escapedDataString.Replace("%20", "+");

string hashedString = "";
using (MD5 md5 = MD5.Create())
{
	byte[] data = md5.ComputeHash(Encoding.UTF8.GetBytes(urlencodedString));

	StringBuilder builder = new StringBuilder();

	for (int i = 0; i < data.Length; ++i)
	{
		builder.Append(data[i].ToString("x2"));
	}

	hashedString = builder.ToString();
}

param["sign"] = hashedString;

string content = "";                
foreach (KeyValuePair<string, string> pair in param)
{
	if (0 < content.Length)
		content += "&";

	content += pair.Key + "=" + pair.Value;
}

HttpClient client = new HttpClient();                    
client.DefaultRequestHeaders.UserAgent.TryParseAdd("BCCS_SDK/3.0 (Darwin; Darwin Kernel Version 14.0.0: Fri Sep 19 00:26:44 PDT 2014; root:xnu-2782.1.97~2/RELEASE_X86_64; x86_64) PHP/5.6.3 (Baidu Push Server SDK V3.0.0 and so on..) cli/Unknown ZEND/2.6.0");

StringContent stringContent = new StringContent(content, Encoding.UTF8, "application/x-www-form-urlencoded");
HttpResponseMessage response = client.PostAsync(_setting.Url, stringContent).Result;
```
